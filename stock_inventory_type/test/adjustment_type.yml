- 
  In order to test the stock_inventory_type module, I will create product,
  create a physical inventory, fill inventory lines from location
-
  I create a product category
-
  !record {model: product.category, id: product_category1}:
    name: Categ1
-
  I create the first product (P1)
-
  !record {model: product.product, id: product_p1}:
    valuation: manual_periodic
    supply_method: produce
    mes_type: fixed
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    type: product
    procure_method: make_to_stock
    cost_method: standard
    categ_id: stock_inventory_type.product_category1
    name: P1
    standard_price: 10.0
-
  I create the second product (P2)
-
  !record {model: product.product, id: product_p2}:
    valuation: manual_periodic
    supply_method: produce
    mes_type: fixed
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    type: product
    procure_method: make_to_stock
    cost_method: standard
    categ_id: stock_inventory_type.product_category1
    name: P2
    standard_price: 20.0
-
    I create the third product (P3)
-
  !record {model: product.product, id: product_p3}:
    valuation: manual_periodic
    supply_method: produce
    mes_type: fixed
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    type: product
    procure_method: make_to_stock
    cost_method: standard
    categ_id: stock_inventory_type.product_category1
    name: P3
    standard_price: 30.0
-
    I create the third product (P3)
-
  !record {model: product.product, id: product_p4}:
    valuation: manual_periodic
    supply_method: produce
    mes_type: fixed
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    type: product
    procure_method: make_to_stock
    cost_method: standard
    categ_id: stock_inventory_type.product_category1
    name: P4
    standard_price: 30.0
-
    I create a physical inventory
-
  !record {model: stock.inventory, id: stock_inventory1}:
    company_id: base.main_company
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    inventory_line_id:
      - company_id: base.main_company
        location_id: stock.stock_location_stock
        product_id: stock_inventory_type.product_p1
        product_qty: -70.0
        product_uom: product.product_uom_unit
        type_id: stock_inventory_type.adjustment_type_loss
        comment: Loss items
      - company_id: base.main_company
        location_id: stock.stock_location_stock
        product_id: stock_inventory_type.product_p2
        product_qty: -50.0
        product_uom: product.product_uom_unit
        type_id: stock_inventory_type.adjustment_type_expired
        comment: Expired product at 12/12/2012
      - company_id: base.main_company
        location_id: stock.stock_location_stock
        product_id: stock_inventory_type.product_p3
        product_qty: -10.0
        product_uom: product.product_uom_unit
        type_id: stock_inventory_type.adjustment_type_scrap
      - company_id: base.main_company
        location_id: stock.stock_location_stock
        product_id: stock_inventory_type.product_p4
        product_qty: 10.0
        product_uom: product.product_uom_unit
    name: Test of UNI-SUP-1.15
    state: draft
-
    I confirm the Inventory
-
  !python {model: stock.inventory}: |
    self.action_confirm(cr, uid, [ref('stock_inventory1')])
    self.action_done(cr, uid, [ref('stock_inventory1')])
-
    I check the 'Loss' stock moves
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('type_id', '=', ref('stock_inventory_type.adjustment_type_loss'))])
    reason_type_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_loss')[1]
    assert move_ids, "No lines with 'Loss' type"
    move = self.browse(cr, uid, move_ids[0])
    assert move.product_id.id == ref('stock_inventory_type.product_p1'), "Move product (P1) is not correct"
    assert move.product_qty == 70.0, "Move quatity (70.0) is not correct"
    assert move.reason_type_id.id == reason_type_id, "Move reason type is not correct"
    assert move.comment == 'Loss items', "Move comment (Loss items) is not correct"
-
    I check the 'Expired' stock moves
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('type_id', '=', ref('stock_inventory_type.adjustment_type_expired'))])
    reason_type_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_expiry')[1]
    assert move_ids, "No lines with 'Expired' type"
    move = self.browse(cr, uid, move_ids[0])
    assert move.product_id.id == ref('stock_inventory_type.product_p2'), "Move product (P2) is not correct"
    assert move.product_qty == 50.0, "Move quatity (50.0) is not correct"
    assert move.reason_type_id.id == reason_type_id, "Move reason type is not correct"
    assert move.comment == 'Expired product at 12/12/2012', "Move comment (Expired product at 12/12/2012) is not correct"
-
    I check the 'Scrapped' stock moves
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('type_id', '=', ref('stock_inventory_type.adjustment_type_scrap'))])
    reason_type_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_loss')[1]
    assert move_ids, "No lines with 'Scrap' type"
    move = self.browse(cr, uid, move_ids[0])
    assert move.product_id.id == ref('stock_inventory_type.product_p3'), "Move product (P3) is not correct"
    assert move.reason_type_id.id == reason_type_id, "Move reason type is not correct"
    assert move.product_qty == 10.0, "Move quatity (10.0) is not correct"
-
    I check the 'Normal' stock moves
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('type_id', '=', False), ('product_id', '=', ref('stock_inventory_type.product_p4'))])
    reason_type_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_discrepancy')[1]
    assert move_ids, "No lines with no type"
    move = self.browse(cr, uid, move_ids[0])
    assert move.product_id.id == ref('stock_inventory_type.product_p4'), "Move product (P4) is not correct"
    assert move.reason_type_id.id == reason_type_id, "Move reason type is not correct"
    assert move.product_qty == 10.0, "Move quatity (10.0) is not correct"