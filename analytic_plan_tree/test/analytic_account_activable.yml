-
  In order to test the analytic account module
  I create the analytic account
-
  !record {model: account.analytic.account, id: analytic_account_1}:
    name: "Test Account"
    inactivation_date: !eval "'%s-01-01' %(datetime.now().year + 2)"
    
-
  I check that the activation date is today
-
  !python {model: account.analytic.account}: |
    ac = self.browse(cr, uid, ref("analytic_account_1"))
    from mx import DateTime
    assert  ac.activation_date == (DateTime.now()+DateTime.RelativeDateTime(months=-3)).strftime('%Y-%m-%d'), "Wrong activation date"
    
-
  I create Asset Account Type.
-
  !record {model: account.account.type, id: account_account_type_asset0}:
    close_method: balance
    code: asset
    name: Asset
    sign: 1

-
  I create the account
-
  !record {model: account.account, id: account_1}:
    name: "Test Account"
    code: "TEST"
    type: payable
    user_type: account_account_type_asset0

-
  I create an analytical journal, ...
-
  !record {model: account.analytic.journal, id: analytic_journal_1}:
    code: CANJ
    name: Cash Analytic Journal
    type: general
    
-
  I create an account analytic line with all of this.
-
  !record {model: account.analytic.line, id: move_line_test}:
    name: testline
    account_id: analytic_account_1
    general_account_id: account_1
    journal_id: analytic_journal_1
    amount: 0.0
    date: !eval "'%s-03-12' %(datetime.now().year + 1)"
    
-
  I change the inactivation date to today (forbidden)
-
  !python {model: account.analytic.account}: |
    import datetime
    try:
      self.write(cr, uid, ref('analytic_account_1'), vals={'inactivation_date': datetime.datetime.now().strftime('%Y-%m-%d')})
    except Exception as exception:
      assert exception.value == "You cannot set an inactivity date lower than tomorrow!", "Date inactivity lower"
     
-
  I change the dates so that activation_date > inactivation_date (forbidden)
-
  !python {model: account.analytic.account}: |
    import datetime
    try:
      self.write(cr, uid, ref('analytic_account_1'), vals={'activation_date': '%s-03-12' %(datetime.datetime.now().year + 1), 'inactivation_date': '%s-03-01' %(datetime.datetime.now().year + 1)})
    except Exception as exception:
      assert exception.value == "Activation date must be lower than inactivation date!", "Activation date must be lower"
     
-
  I change the analytic line date so that it is outside the account's activity period (forbidden)
-
  !python {model: account.analytic.line}: |
    import datetime
    try:
      self.write(cr, uid, ref('move_line_test'), vals={'account_id': ref('analytic_account_1'), 'date': '%s-03-01' %(datetime.datetime.now().year + 2)})
    except Exception as exception:
      assert exception.value == "The analytic account selected is not active.", "date out of the account"
