-
  Asset Form Creation / Deletion
-  
  !python {model: audittrail.rule}: |
    name = 'Asset Form Creation'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'product.asset')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids), ('log_create', '=', True)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'product.asset'), ('name', 'in', fields)], context=context)


        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': False,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  Asset Form Write
-
  !python {model: audittrail.rule}: |
    name = 'Asset Form Write'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'product.asset')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids), ('log_write', '=', True)], context=context)
    if object_ids:
        fields = ['name', 'state', 'product_id', 'asset_type_id', 'userful_life_id', 'serial_nb', 'brand', 'type', 'model', 'year', 'move_line_id', 'invo_value', 'invo_date', 'asset_bs_depreciation_account_id', 'asset_pl_account_id', 'start_date']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'product.asset'), ('name', 'in', fields)], context=context)
        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': False,
            'log_create': False,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
