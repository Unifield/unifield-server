-
  For Proprietary Instances (msf.instance), track the creation, modification, and deletion
-  
  !python {model: audittrail.rule}: |
    name = 'Proprietary Instances'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'msf.instance')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        fields = ['name', 'code', 'level', 'mission', 'parent_id', 'move_prefix', 'instance', 'note', 'reconcile_prefix', 'state']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'msf.instance'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Target CC (account.target.costcenter), track the creation, modification, and deletion
-
  !python {model: audittrail.rule}: |
    name = 'Target Cost Centers'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.target.costcenter')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        fields = ['is_target', 'is_top_cost_center', 'is_po_fo_cost_center']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' , 'account.target.costcenter'), ('name', 'in', fields)], context=context)
        field_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'account.target.costcenter'), ('name', '=', 'cost_center_id')], context=context)
        field_parent = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'account.target.costcenter'), ('name', '=', 'instance_id')], context=context)

        name_id = False
        parent_id = False

        if field_parent:
            parent_id = field_parent[0]
            if field_name:
                name_id = field_name[0]

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
            'parent_field_id': parent_id,
            'name_get_field_id': name_id,
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
