-
  For EMPLOYEE, rule for the CREATE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'EMPLOYEE CREATE WRITE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'hr.employee')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['active', 'birthday', 'code', 'cost_center_id', 'country_id', 'destination_id', 'employee_type', 'free1_id', 'free2_id', 'funding_pool_id', 'gender', 'homere_codeterrain', 'homere_id_staff', 'homere_id_unique', 'identification_id', 'job_name', 'marital', 'mobile_phone', 'name', 'name_resource', 'notes', 'passport_id', 'private_phone', 'resource_type', 'sinid', 'ssnid', 'work_email', 'work_location', 'work_phone']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', 'in' , ('hr.employee', 'resource.resource')), ('name', 'in', fields)], context=context)
        vals = {'name': name,
                'object_id': object_ids[0],
                'log_create': True,
                'log_write': True,
                'log_unlink': False,
                'field_ids': [(6, 0, fields_ids)],
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For EMPLOYEE, rule for the DELETE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'EMPLOYEE DELETE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'hr.employee')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'hr.employee'), ('name', 'in', fields)], context=context)
        vals = {'name': name,
                'object_id': object_ids[0],
                'log_create': False,
                'log_write': False,
                'log_unlink': True,
                'field_ids': [(6, 0, fields_ids)],
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
