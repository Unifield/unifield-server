-
  For Scheduled Synchronizations (ir.cron), track the creation, modification, and deletion
-
  !python {model: audittrail.rule}: |
    name = 'Scheduled Synchronizations'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'ir.cron')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        fields = ['name', 'active', 'user_id', 'priority', 'interval_number', 'interval_type', 'nextcall', 'numbercall', 'model', 'function', 'args']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'ir.cron'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)

-
  For Backup Configuration (backup.config), track the creation, modification, and deletion
-
  !python {model: audittrail.rule}: |
    name = 'Backup Config'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'backup.config')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        fields = ['name', 'beforemanualsync', 'beforeautomaticsync', 'aftermanualsync', 'afterautomaticsync', 'scheduledbackup', 'backup_type', 'wal_directory', 'ssh_config_dir', 'remote_user', 'remote_host', 'basebackup_date', 'rsync_date', 'cloud_date']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'backup.config'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)

-
  For Connection Manager (sync.client.sync_server_connection), track the creation, modification, and deletion
-
  !python {model: audittrail.rule}: |
    name = 'Connection Manager'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'sync.client.sync_server_connection')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        fields = ['host', 'port', 'protocol', 'database', 'login', 'password', 'max_size', 'timeout', 'xmlrpc_rety', 'automatic_patching', 'automatic_patching_hour_from', 'automatic_patching_hour_to']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'sync.client.sync_server_connection'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
