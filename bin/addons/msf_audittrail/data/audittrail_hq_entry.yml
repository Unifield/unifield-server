-
  For HQ Entries (hq.entries), track the creation, modification, and deletion
-
  !python {model: audittrail.rule}: |
    name = 'HQ Entries'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'hq.entries')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        # Create the rule
        fields = ['name', 'ref', 'document_date', 'date', 'period_id', 'account_id', 'partner_txt', 'amount', 'currency_id', 'destination_id',
                  'cost_center_id', 'analytic_id', 'free_1_id', 'free_2_id', 'original_id', 'user_validated', 'is_original']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'hq.entries'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)

-
  For International Invoice Lines
-
  !python {model: audittrail.rule}: |
    name = 'International Invoice Lines'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'esc.invoice.line')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        # Create the rule
        fields = ['state']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'esc.invoice.line'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
