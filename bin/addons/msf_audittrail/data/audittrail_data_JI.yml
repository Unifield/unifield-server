-
  For Journal Entries (account.move), track the creation and modif, delete
-  
  !python {model: audittrail.rule}: |
    name = 'Journal Entries'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.move')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        # Create the rule
        fields = ['name','state','ref','journal_id','period_id','date','partner_id','status','sequence_id','manual_name','document_date','analytic_distribution_id','employee_id','instance_id','manual_currency_id']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.move'), ('name', 'in', fields)], context=context)

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Journal Items (account.move.line), track the creation and modif, delete
-
  !python {model: audittrail.rule}: |
    name = 'Journal Items'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.move.line')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids:
        # Create the rule
        fields = ['state','reference','account_id','partner_txt','debit_currency','credit_currency','employee_id','analytic_distribution_id']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.move.line'), ('name', 'in', fields)], context=context)
        field_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'account.move.line'), ('name', '=', 'name')], context=context)
        field_parent = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'account.move.line'), ('name', '=', 'move_id')], context=context)

        name_id = False
        parent_id = False

        if field_parent:
            parent_id = field_parent[0]
            if field_name:
                name_id = field_name[0]

        field_other_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'account.move.line'), ('name', '=', 'sequence_move')], context=context)
        field_other_id = False
        if field_other_name:
            field_other_id = field_other_name[0]

        vals = {
            'name': name,
            'object_id': object_ids[0],
            'log_write': True,
            'log_unlink': True,
            'log_create': True,
            'field_ids': [(6, 0, fields_ids)],
            'parent_field_id': parent_id,
            'name_get_field_id': name_id,
            'field_other_id': field_other_id,
        }

        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
