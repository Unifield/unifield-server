- 
  I create empty theoretical composition list 01, productA, ITC, 2010-01-20
- 
  !record {model: composition.kit, id: kit_compo_01}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_A
    composition_version_txt: 'ITC'
    composition_creation_date: '2010-01-20'
-
  I test the function fields for kit_compo_01
-
  !python {model: composition.kit}: |
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    # composition_batch_check: should be true
    assert kit.composition_batch_check, 'kit_compo_01: composition_batch_check should be true - %s'%kit.composition_batch_check
    # composition_expiry_check: should be true
    assert kit.composition_expiry_check, 'kit_compo_01: composition_expiry_check should be true - %s'%kit.composition_expiry_check
    # name: ITC - 20/jan/2010 - I believe you it is correct
    
    # composition_version: ITC
    assert kit.composition_version, 'kit_compo_01: composition_version should be %s - %s'%(kit.composition_version_txt,kit.composition_version)
    # composition_combined_ref_lot: False
    assert not kit.composition_combined_ref_lot, 'kit_compo_01: composition_combined_ref_lot should be false - %s'%kit.composition_combined_ref_lot
- 
  I create empty theoretical composition list 02, productA, OCG, 2010-01-20
- 
  !record {model: composition.kit, id: kit_compo_02}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_A
    composition_version_txt: 'OCG'
    composition_creation_date: '2010-01-20'
- 
  I create empty theoretical composition list 03, productB, OCG, 2010-01-20
- 
  !record {model: composition.kit, id: kit_compo_03}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_B
    composition_version_txt: 'OCG'
    composition_creation_date: '2010-01-20'
-
  I then create Items for the compo 01 - prodC
-
  !record {model: composition.item, id: item_01_01}:
    item_kit_id: kit_compo_01
    item_product_id: kit_product_C
    item_qty: 10
    item_uom_id: product.product_uom_unit
-
  I check the function fields of composition item
-
  !python {model: composition.item}: |
    item = self.browse(cr, uid, ref("item_01_01"), context=context)
    # name
    assert item.name == item.item_product_id.name, 'item_01_01: name field is wrong - %s - %s'%(item.item_product_id.name,item.name)
    # item_kit_version
    assert item.item_kit_version == item.item_kit_id.composition_version, 'item_01_01: item_kit_version field is wrong - %s - %s'%(item.item_kit_id.composition_version,item.item_kit_version)
    # item_kit_type
    assert item.item_kit_type == item.item_kit_id.composition_type, 'item_01_01: item_kit_type field is wrong - %s - %s'%(item.item_kit_id.composition_type,item.item_kit_type)
    # state
    assert item.state == item.item_kit_id.state, 'item_01_01: state field is wrong - %s - %s'%(item.item_kit_id.state,item.state)
-
  !record {model: composition.item, id: item_01_02}:
    item_kit_id: kit_compo_01
    item_product_id: kit_product_C
    item_qty: 20
    item_uom_id: product.product_uom_unit
-
  I set the theoretical kit 01 as inactive
-
  !python {model: composition.kit}: |
    self.mark_as_inactive(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    assert not kit.active, 'kit_compo_01: the field active is wrong, should be false - %s'%kit.active
-
  I set the theoretical kit 01 back as active
-
  !python {model: composition.kit}: |
    self.mark_as_active(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    assert kit.active, 'kit_compo_01: the field active is wrong, should be true - %s'%kit.active
-
  I set the theoretical kit 01 as complete and check corresponding states
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    print kit.state
    assert kit.state == 'completed', 'kit_compo_01: the field state is wrong, should be completed - %s'%kit.state
    
    for item in kit.composition_item_ids:
      assert item.state == 'completed', 'kit_compo_01: the field state of corresponding item is wrong, should be completed - %s'%item.state
-
  END OF FILE
-
  !python {model: stock.picking}: |
    print 'EOF'
