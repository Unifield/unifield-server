-
  In order to test the threshold rules feature, I will create
  a threshold rule for each product defined in data.yml, run
  the scheduler and check if a procurement order is created or
  not
-
  I create a threshold rule for product1
-
  !record {model: threshold.value, id: threshold1}:
    name: Threshold1
    product_id: product1
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 0.00
    threshold_manual_ok: False
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1')], context=context)
    assert res_ids, "No procurement created for product 1"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Threshold 1 (Expected 175.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product2
-
  !record {model: threshold.value, id: threshold2}:
    name: Threshold2
    product_id: product2
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 0.00
    threshold_manual_ok: False
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold2')], context=context)
    assert not res_ids, "Procurement created for product 2"
-
  I create a threshold rule for product3
-
  !record {model: threshold.value, id: threshold3}:
    name: Threshold3
    product_id: product3
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 250.0
    threshold_manual_ok: True
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold3')], context=context)
    assert not res_ids, "Procurement created for product 3"
-
  I create a threshold rule for product4
-
  !record {model: threshold.value, id: threshold4}:
    name: Threshold4
    product_id: product4
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 250.00
    threshold_manual_ok: True
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold4')], context=context)
    assert res_ids, "No procurement created for product 4"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 75.00, "Bad quantity on procurement order for Threshold 4 (Expected 75.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product5
-
  !record {model: threshold.value, id: threshold5}:
    name: Threshold5
    product_id: product5
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 0.00
    threshold_manual_ok: False
    qty_to_order: 150.00
    qty_order_manual_ok: True
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold5')], context=context)
    assert res_ids, "No procurement created for product 5"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 150.00, "Bad quantity on procurement order for Threshold 5 (Expected 150.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product6
-
  !record {model: threshold.value, id: threshold6}:
    name: Threshold6
    product_id: product6
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 250.00
    threshold_manual_ok: True
    qty_to_order: 150.00
    qty_order_manual_ok: True
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold6')], context=context)
    assert res_ids, "No procurement created for product 6"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 150.00, "Bad quantity on procurement order for Threshold 6 (Expected 150.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product7
-
  !record {model: threshold.value, id: threshold7}:
    name: Threshold7
    product_id: product7
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 250.00
    threshold_manual_ok: True
    qty_to_order: 150.00
    qty_order_manual_ok: True
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold7')], context=context)
    assert not res_ids, "Procurement created for product 7"
-
  I create a threshold rule for product8
-
  !record {model: threshold.value, id: threshold8}:
    name: Threshold8
    product_id: product8
    uom_id: product.product_uom_unit
    location_id: stock.stock_location_stock
    threshold_value: 0.00
    threshold_manual_ok: False
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: True
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold8')], context=context)
    assert res_ids, "No procurement created for product 8"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 150.00, "Bad quantity on procurement order for Threshold 8 (Expected 150.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product9
-
  !record {model: threshold.value, id: threshold9}:
    name: Threshold9
    category_id: cat1
    location_id: stock.stock_location_stock
    threshold_value: 250.00
    threshold_manual_ok: True
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold9')], context=context)
    assert len(res_ids) == 1, "Too procurement created for threshold 9"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_id.id == ref('product9'), "No procurement created for product 9"
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Threshold 9 (Expected 175.00 :: %s)" % res.product_qty
-
  I create a threshold rule for product11
-
  !record {model: threshold.value, id: threshold11}:
    name: Threshold11
    category_id: cat2
    location_id: stock.stock_location_stock
    threshold_value: 0.00
    threshold_manual_ok: False
    qty_to_order: 0.00
    qty_order_manual_ok: False
    frequency: 3.00
    consumption_period: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold11')], context=context)
    assert len(res_ids) == 1, "Too procurement created for threshold 11"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_id.id == ref('product11'), "Bad product on procurement order for Threshold 11"
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Threshold 1 (Expected 175.00 :: %s)" % res.product_qty