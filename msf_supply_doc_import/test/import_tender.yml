-
  Create Tender (T1)
- 
  !record {model: tender, id: t1}:
    name: My Tender test
    creator: base.user_root
    requested_date: !eval time.strftime('%Y-%m-%d')
    location_id: stock.stock_location_stock
    categ: medical
    warehouse_id: stock.stock_warehouse_shop0
-
  Open the wizard
-
  !python {model: tender}: |
    wizard_values = self.wizard_import_tender_line(cr, uid, ref("t1"), context)
    assert wizard_values.get('res_model', False) == 'wizard.import.tender.line', "Wizard should be wizard.import.tender.line"
-
  Import tender lines
-
  !python {model: wizard.import.tender.line}: |
    import addons, base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    file_path = addons.get_module_resource('msf_supply_doc_import','test','import_files_for_testing', 'tender.xml')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    logging.getLogger('tests').log(logging.TEST, 'Tender is %s.' % ref('t1'))
    vals={'file': file64,
          'filename_template': 'template.xls',
          'filename': 'Lines_Not_Imported.xls',
          'tender_id': ref('t1')}
    wizard_id = self.create(cr, uid, vals, context)
    logging.getLogger('tests').log(logging.TEST, 'We create the wizard import tender.xml.')
    # the yml_test is important to avoid going through the threading method
    context.update({'yml_test': True})
    logging.getLogger('tests').log(logging.TEST, 'We import tender.xml.')
    self.import_file(cr, uid, wizard_id, context)
    logging.getLogger('tests').log(logging.TEST, 'We refresh the view.')
    self.dummy(cr, uid, wizard_id, context)
    wiz_read = self.read(cr, uid, wizard_id, ['state', 'percent_completed', 'data'])
    logging.getLogger('tests').log(logging.TEST, 'The import is finished (%s). \n Completed: %s' % (wiz_read['state'], wiz_read['percent_completed']))
    logging.getLogger('tests').log(logging.TEST, 'Check the file of the lines with error.')
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(wiz_read['data']))
    rows = fileobj.getRows()
    rows.next()
    count_row = 1
    for row in rows:
        count_row += 1
    assert count_row==2, ("The file should contain 2 lines but the number of lines is %s" % count_row)
-
  Check tender lines imported
-
  !python {model: tender}: |
    tender = self.browse(cr, uid, ref('t1'), context)
    count_line_imported = len(tender.tender_line_ids)
    assert count_line_imported==14, ("The number of lines imported should be 14 but it is %s" % count_line_imported)
