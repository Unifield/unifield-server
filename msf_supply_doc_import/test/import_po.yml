-
  Create Purchase Order (PO1) in English
- 
  !record {model: purchase.order, id: po1}:
    name: My PO test
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: !eval time.strftime('%Y-%m-%d')
    partner_address_id: address_A
    partner_id: partner_A
    pricelist_id: purchase.list0
    priority: normal
    order_type: regular
    categ: other
-
  Import PO lines (the code for testing the import of the RfQ is the same)
-
  !python {model: purchase.order}: |
    wizard_values = self.wizard_import_po_line(cr, uid, ref('po1'), context)
    assert wizard_values.get('res_model', False) == 'wizard.import.po.line', "Wizard should be wizard.import.po.line"
    self.pool.get('wizard.import.po.line').cancel(cr, uid, wizard_values['res_id'], context)
-
  Import po lines in English
-
  !python {model: wizard.import.po.line}: |
    import addons, base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    lang = 'en_MF'
    file_path = addons.get_module_resource('msf_supply_doc_import','test','import_files_for_testing', 'po.xml')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    vals={'file': file64,
          'filename_template': 'template.xls',
          'filename': 'Lines_Not_Imported.xls',
          'po_id': ref('po1')}
    wizard_id = self.create(cr, uid, vals, context)
    read_wiz = self.read(cr, uid, wizard_id, ['file'], context)['file']
    assert read_wiz, ('The file was not written in wizard')
    logging.getLogger('tests').log(logging.TEST, 'We create the wizard import po.xml. in English')
    # the yml_test is important to avoid going through the threading method
    context.update({'yml_test': True, 'lang': lang})
    logging.getLogger('tests').log(logging.TEST, 'We import po.xml.')
    self.import_file(cr, uid, wizard_id, context)
    logging.getLogger('tests').log(logging.TEST, 'We refresh the view.')
    self.dummy(cr, uid, wizard_id, context)
    wiz_read = self.read(cr, uid, wizard_id, ['state', 'percent_completed', 'data'])
    assert wiz_read['percent_completed'], ("Nothing was imported")
    logging.getLogger('tests').log(logging.TEST, 'The import is finished. Completed: %s' % (wiz_read['percent_completed']))
    logging.getLogger('tests').log(logging.TEST, 'Check the file of the lines with error. in English')
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(wiz_read['data']))
    rows = fileobj.getRows()
    rows.next()
    count_row = 1
    for row in rows:
        count_row += 1
    assert count_row==2, ("The file should contain 2 lines but the number of lines is %s" % count_row)
-
  Check po lines imported in English
-
  !python {model: purchase.order}: |
    po = self.browse(cr, uid, ref('po1'), context)
    count_line_imported = len(po.order_line)
    assert count_line_imported==15, ("The number of lines imported should be 15 but it is %s" % count_line_imported)
    count_line_with_errors = len([line for line in po.order_line if line.to_correct_ok])
    assert count_line_with_errors==13, ("The number of lines with errors should be 13 but it is %s" % count_line_with_errors)