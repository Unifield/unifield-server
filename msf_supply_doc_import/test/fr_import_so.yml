-
  Create a Sale Order 2 (SO2) in French
-
  !record {model: sale.order, id: so2}:
    name: My FO test in French
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_quantity: order
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    delivery_requested_date: !eval time.strftime('%Y-%m-%d')
-
  Open the import wizard for the SO in French
-
  !python {model: sale.order}: |
    wiz_values = self.wizard_import_fo_line(cr, uid, ref('so2'), context)
    res_model = wiz_values['res_model']
    assert res_model == 'wizard.import.fo.line', ("The wizard model should be 'wizard.import.fo.line' and it is %s" % res_model)
    assert wiz_values['context'].get('active_id') == ref("so2"), ("The reference to the fo doesn't exist")
-
  Import the file through the wizard for the SO
-
  !python {model: wizard.import.fo.line}: |
    import addons, base64, logging
    wiz_ids = self.search(cr, uid, [('fo_id', '=', ref('so2'))])
    assert len(wiz_ids) == 1, ("There should be one wizard open at a time and there are %s" % len(wiz_ids))
    # we set the lang to French and take the file to import accordingly
    lang = 'fr_MF'
    # get the file path
    file_path = addons.get_module_resource('msf_supply_doc_import','test','import_files_for_testing', 'fr_so.xls')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    logging.getLogger('tests').log(logging.TEST, 'We write the file to import in the wizard in French.')
    self.write(cr, uid, wiz_ids, {'file': file64}, context)
    context.update({'yml_test': True, 'lang': lang})
    logging.getLogger('tests').log(logging.TEST, 'We import the file.')
    self.import_file(cr, uid, wiz_ids, context)
    self.close_import(cr, uid, wiz_ids, context)
-
  Check the lines imported on the fo in French
-
  !python {model: sale.order}: |
    fo = self.browse(cr, uid, ref('so2'), context)
    count_line_imported = len(fo.order_line)
    assert count_line_imported==15, ("The number of lines imported should be 15 but it is %s" % count_line_imported)
    count_line_with_errors = len([line for line in fo.order_line if line.to_correct_ok])
    assert count_line_with_errors==13, ("The number of lines with errors should be 13 but it is %s" % count_line_with_errors)