-
  In order to test the split of an invoice, I create an invoice
-
  !record {model: account.invoice, id: account_invoice_for_split0}:
      account_id: account.a_pay
      address_contact_id: base.res_partner_address_3000
      address_invoice_id: base.res_partner_address_3000
      check_total: 3000.0
      company_id: base.main_company
      currency_id: base.EUR
      invoice_line:
        - account_id: account.a_expense
          name: '[PC1] Basic PC'
          price_unit: 300.0
          product_id: product.product_product_pc1
          quantity: 10.0
          uos_id: product.product_uom_unit
      journal_id: account.expenses_journal
      partner_id: base.res_partner_desertic_hispafuentes
      reference_type: none
      type: in_invoice
-
  I create a wizard from this invoice
-
  !python {model: account.invoice}: |
    wizard = self.button_split_invoice(cr, uid, [ref('account_invoice_for_split0')])
    assert wizard != False, "Wizard have not been created!"
    assert wizard.get('context', False) != False, "No context found in wizard!"
    assert wizard.get('context').get('wizard_id', False) != False, "No 'wizard_id' field found in wizard context!"
-
  I change the quantity to 3 in the invoice line and confirm the wizard in order to verify that 2 invoices exist, one with 3, another with 7.
-
  !python {model: wizard.split.invoice}: |
    wizard = self.search(cr, uid, [('invoice_id', '=', ref('account_invoice_for_split0'))])
    assert wizard != False, "No wizard found"
    wiz_id = wizard[0]
    wiz_line_obj = self.pool.get('wizard.split.invoice.lines')
    wiz_line_ids = wiz_line_obj.search(cr, uid, [('wizard_id', '=', wiz_id)])
    assert wiz_line_ids != False, "No lines found in the invoice line wizard!"
    for wiz_line in wiz_line_obj.browse(cr, uid, wiz_line_ids):
        wiz_line_obj.write(cr, uid, [wiz_line.id], {'quantity': 3})
    res = self.button_confirm(cr, uid, [wiz_id])
    assert res != False, "An error occured on wizard confirmation button!"
    assert res.get('invoice_ids', False) != False, "No invoice ids found!"
    inv_id = res.get('invoice_ids')[0]
    inv_line_obj = self.pool.get('account.invoice.line')
    inv_line_ids = inv_line_obj.search(cr, uid, [('invoice_id', '=', inv_id)])
    for inv_line in inv_line_obj.browse(cr, uid, inv_line_ids):
        assert inv_line.quantity == 3, "The quantity should be 3!"
    first_inv_line_ids = inv_line_obj.search(cr, uid, [('invoice_id', '=', ref('account_invoice_for_split0'))])
    for first_inv_line in inv_line_obj.browse(cr, uid, first_inv_line_ids):
        assert first_inv_line.quantity == 7, "The initial quantity should be corrected to 7"
