-
    In order to test the procurement list module, I will create 6 suppliers,
    5 products and 3 procurement request.
    After, I try all possibility to test the supplier default selection
-
    I create the 6 partners
-
    I create supplier S1
-
  !record {model: res.partner, id: supplier1}:
    name: S1
    supplier: True
    address:
      - name: S1
-
    I create the supplier S2
-
  !record {model: res.partner, id: supplier2}:
    name: S2
    supplier: True
    address:
      - name: S2
-
    I create the supplier S3
-
  !record {model: res.partner, id: supplier3}:
    name: S3
    supplier: True
    address:
      - name: S3
-
    I create the supplier S4
-
  !record {model: res.partner, id: supplier4}:
    name: S4
    supplier: True
    address:
      - name: S4
-
    I create the supplier S5
-
  !record {model: res.partner, id: supplier5}:
    name: S5
    supplier: True
    address:
      - name: S5
-
    I create the supplier S6
-
  !record {model: res.partner, id: supplier6}:
    name: S6
    supplier: True
    address:
      - name: S6
-
    I create the product P1
-
  !record {model: product.product, id: product1}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
      - sequence: 20
        min_qty: 0.00
        name: supplier2
      - sequence: 30
        min_qty: 0.00
        name: supplier3
-
    I create the product P2
-
  !record {model: product.product, id: product2}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P2
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier2
      - sequence: 20
        min_qty: 0.00
        name: supplier1
-
    I create the product P3
-
  !record {model: product.product, id: product3}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P3
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier3
-
    I create the product P4
-
  !record {model: product.product, id: product4}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P4
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier3
      - sequence: 20
        min_qty: 0.00
        name: supplier4
-
    I create the product P5
-
  !record {model: product.product, id: product5}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P5
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier4
      - sequence: 20
        min_qty: 0.00
        name: supplier5
-
    I create a Procurement Request
-
  !record {model: procurement.list, id: list1}:
    name: PR1
    requestor: Administration
    warehouse_id: stock.warehouse0
    origin: R 20043
-
    I create a Procurement Request Line 1 for list1 
-
  !record {model: procurement.list.line, id: list1_line1}:
    product_id: product1
    product_uom_id: product.product_uom_unit
    product_qty: 12.0
    comment: special comment
    list_id: list1
-
    I create a Procurement Request Line 2 for list1 
-
  !record {model: procurement.list.line, id: list1_line2}:
    product_id: product2
    product_uom_id: product.product_uom_unit
    product_qty: 10.0
    list_id: list1
-
    I create a Procurement Request
-
  !record {model: procurement.list, id: list2}:
    name: PR2
-
  I create Procurement Request line 1 for list2 
-
  !record {model: procurement.list.line, id: list2_line1}:
    product_id: product3
    product_uom_id: product.product_uom_unit
    product_qty: 20.0
    list_id: list2
-
  I create Procurement Request line 2 for list2 
-
  !record {model: procurement.list.line, id: list2_line2}:
    product_id: product4
    product_uom_id: product.product_uom_unit
    product_qty: 30.0
    list_id: list2
-
    I create a Procurement Request
-
  !record {model: procurement.list, id: list3}:
    name: PR3
-
    I create a Procurement Request Line 1 for list3
-
  !record {model: procurement.list.line, id: list3_line1}:
    product_id: product5
    product_uom_id: product.product_uom_unit
    product_qty: 30.0
    list_id: list3
-
    I check that the list which was initially in the draft state
-
  !assert {model: procurement.list, id: list1}:
    - state == 'draft', "Bad default value for state"
    - requestor == 'Administration', "Bad value for requestor"
    - origin == 'R 20043', "Bad value for origin"
-
    I test the confirmation of these three Procurement Request
-
    I confirm the list1
-
  !python {model: procurement.list}: |
    pl_id1 = self.pool.get('procurement.list').browse(cr, uid, ref('list1'))
    pl_id1.create_rfq()
-
<<<<<<< TREE
    I create a Wizard to create PO
-
  !record {model: procurement.choose.supplier, id: choose1}:
    list_id: list1
    line_ids:
      - product_id: product1
        product_uom: product.product_uom_unit
        product_qty: 12.0
        line_id: list1_line1
        supplier_id: supplier1
      - product_id: product2
        product_uom: product.product_uom_unit
        product_qty: 10.0
        line_id: list1_line2 
        supplier_id: supplier2
-
    I check if the creation of PO is ok
-
  !python {model: procurement.choose.supplier}: |
    choose_obj = self.pool.get('procurement.choose.supplier')
    choose_obj.create_po(cr, uid, [ref('choose1')])
-
    I check if the creation of RfQ is ok
-
#  !record {model: procurement.choose.supplier.rfq, id: supplier_choose1}:
#    choose_id: choose1
#    supplier_ids:
#      - ref('supplier1')
#      - supplier_id: ref('supplier2')
#      - supplier_id: ref('supplier3')
#-
#    I confirm the creation of RfQ
#-
#  !python {model: procurement.choose.supplier.rfq}: |
#    sup_obj = self.pool.get('procurement.choose.supplier.rfq')
#    sup_obj.create_rfq(cr, uid, ref('supplier_choose1'))   =======
    I check if the latest message in procurement line is 'RfQ In Progress'
-
  !assert {model: procurement.list.line, id: procurement_line1}:
    - latest == 'RfQ In Progress'
-
    I check if only one RfQ will be created for the 
-
  !python {model: procurement.list}: |
    pl_obj = self.pool.get('procurement.list')
    pol_obj = self.pool.get('purchase.order.line')
    order_obj = self.pool.get('purchase.order')
    pol_ids = pol_obj.search(cr, uid, [('product_id', '=', ref('product_product_p1'))])
    pl = pl_obj.browse(cr, uid, ref('procurement_list_1'))

    for pol in pol_obj.browse(cr, uid, pol_ids):
        assert pol.order_id.origin == pl.name, "Bad name for the name of the generated Purchase Order"
    order_obj.wkf_confirm_order(cr, uid, [pol.order_id.id])
    assert pol.procurement_line_id.latest == pol.order_id.name, "Procurement line not updated"
-
    I check that no purchase order line with P2
-
  !python {model: procurement.list}: |
    pl_obj = self.pool.get('procurement.list')
    pol_obj = self.pool.get('purchase.order.line')
    pol_ids = pol_obj.search(cr, uid, [('product_id', '=', ref('product_product_p2'))])
    assert len(pol_ids) == 0, "No purchase order line found !"
>>>>>>> MERGE-SOURCE
