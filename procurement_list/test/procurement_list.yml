-
    In order to test the procurement list module, I will create 6 suppliers,
    5 products and 3 procurement request.
    After, I try all possibility to test the supplier default selection
-
    I create the 6 partners
-
    I create supplier S1
-
  !record {model: res.partner, id: supplier1}:
    name: S1
    supplier: True
    address:
      - name: S1
-
    I create the supplier S2
-
  !record {model: res.partner, id: supplier2}:
    name: S2
    supplier: True
    address:
      - name: S2
-
    I create the supplier S3
-
  !record {model: res.partner, id: supplier3}:
    name: S3
    supplier: True
    address:
      - name: S3
-
    I create the supplier S4
-
  !record {model: res.partner, id: supplier4}:
    name: S4
    supplier: True
    address:
      - name: S4
-
    I create the supplier S5
-
  !record {model: res.partner, id: supplier5}:
    name: S5
    supplier: True
    address:
      - name: S5
-
    I create the supplier S6
-
  !record {model: res.partner, id: supplier6}:
    name: S6
    supplier: True
    address:
      - name: S6
-
    I create the product P1
    In order to test the procurement list module, I start by creating a new product category
-
  !record {model: product.category, id: product_cat1}:
    name: Categ1
-
    I create new product 'P1'
-
  !record {model: product.product, id: product1}:
    categ_id: product_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
      - sequence: 20
        min_qty: 0.00
        name: supplier2
      - sequence: 30
        min_qty: 0.00
        name: supplier3
-
    I create a second product, P2
-
  !record {model: product.product, id: product2}:
    categ_id: product_cat1
    cost_method: standard
    mes_type: fixed
    name: P2
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier2
      - sequence: 20
        min_qty: 0.00
        name: supplier1
-
    I create the product P3
-
  !record {model: product.product, id: product3}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P3
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier3
-
    I create the product P4
-
  !record {model: product.product, id: product4}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P4
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier3
      - sequence: 20
        min_qty: 0.00
        name: supplier4
-
    I create the product P5
-
  !record {model: product.product, id: product5}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P5
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier4
      - sequence: 20
        min_qty: 0.00
        name: supplier5
-
    I create a procurement list for these two products 
-
  !record {model: procurement.list, id: list1}:
    requestor: Administration
    warehouse_id: stock.warehouse0
    origin: R 20043
-
    I create a Procurement Request Line 1 for list1 
-
  !record {model: procurement.list.line, id: list1_line1}:
    product_id: product1
    product_uom_id: product.product_uom_unit
    product_qty: 12.0
    comment: special comment
    from_stock: False
    list_id: list1
    supplier_id: supplier1
-
    I create a Procurement Request Line 2 for list1 
-
  !record {model: procurement.list.line, id: list1_line2}:
    product_id: product2
    product_uom_id: product.product_uom_unit
    product_qty: 10.0
    from_stock: True
    list_id: list1
    supplier_id: supplier2
-
    I create a second Procurement Request
-
  !record {model: procurement.list, id: list2}:
    requestor: Administration
    warehouse_id: stock.warehouse0
-
  I create Procurement Request line 1 for list2 
-
  !record {model: procurement.list.line, id: list2_line1}:
    product_id: product3
    product_uom_id: product.product_uom_unit
    product_qty: 20.0
    list_id: list2
    supplier_id: supplier3
-
  I create Procurement Request line 2 for list2 
-
  !record {model: procurement.list.line, id: list2_line2}:
    product_id: product4
    product_uom_id: product.product_uom_unit
    product_qty: 30.0
    list_id: list2
    supplier_id: supplier3
-
    I create a third Procurement Request
-
  !record {model: procurement.list, id: list3}:
    requestor: Administration
    warehouse_id: stock.warehouse0
    origin: R 20045
-
    I create a Procurement Request Line 1 for list3
-
  !record {model: procurement.list.line, id: list3_line1}:
    product_id: product5
    product_uom_id: product.product_uom_unit
    product_qty: 30.0
    list_id: list3
    supplier_id: supplier3
-
    I check that the list which was initially in the draft state
-
  !assert {model: procurement.list, id: list1}:
    - state == 'draft'
    - requestor == 'Administration'
    - origin == 'R 20043'
-
    I check if the creation of PO is ok
-
  !python {model: procurement.list}: |
    self.create_po(cr, uid, [ref('list1')])
-
    I check if documents in 'Sourcing' tab are filled
-
  !assert {model: procurement.list, id: list1}:
    - len(order_ids) == 2, "Number of sourcing documents is wrong"
- 
    I check if the creation of RfQ is ok
-
  !record {model: procurement.choose.supplier.rfq, id: supplier_choose2}:
    choose_id: list2
    supplier_ids:
      - supplier3
      - supplier4
-
    I confirm the creation of RfQ
-
  !python {model: procurement.choose.supplier.rfq}: |
    self.create_rfq(cr, uid, [ref('supplier_choose2')])
-
    I check if the latest message in procurement line is 'RfQ In Progress'
-
  !assert {model: procurement.list.line, id: list2_line1}:
    - latest == 'RfQ In Progress', "Rfq In Progress not applied in latest field of line"
-
    I check if the latest message in procurement line is 'RfQ In Progress'
-
  !assert {model: procurement.list.line, id: list2_line2}:
    - latest == 'RfQ In Progress', "Rfq In Progress not applied in latest field of line"
-
    I check if documents in 'Sourcing' tab are filled
-
  !assert {model: procurement.list, id: list2}:
    - len(order_ids) == 2, "Number of sourcing documents is wrong"
-
    I check if only one RfQ will be created for the line
-
  !python {model: procurement.list}: |
    list2 = self.browse(cr, uid, ref('list2'))
    pol_obj = self.pool.get('purchase.order.line')
    order_obj = self.pool.get('purchase.order')

    list_line_ids = []
    for line in list2.line_ids:
        list_line_ids.append(line.id)

    pol_ids = pol_obj.search(cr, uid, [('product_id', '=', ref('product3')), ('procurement_line_id', 'in', list_line_ids)])

    for pol in pol_obj.browse(cr, uid, pol_ids):
        assert pol.order_id.origin == pl.name, "Bad origin for the generated Purchase Order"
        order_obj.wkf_confirm_order(cr, uid, [pol.order_id.id])
        print pol.procurement_line_id.latest, pol.order_id.name
        assert pol.procurement_line_id.latest == pol.order_id.name, "Procurement line not updated"
-
    Split the line
-
  !record {model: procurement.list.line.split, id: split1}:
    line_id: list3_line1
    qty: 20.00
-
    I check if we have two lines for the product P5 now
-
  !python {model: procurement.list.line}: |
    self.pool.get('procurement.list.line.split').split(cr, uid, ref('split1'))
    assert len(self.search(cr, uid, [('product_id', '=', ref('product5')), ('list_id', '=', ref('list3'))])) == 2, "Line isn't split"
-
    I check if the quantity in old line is decrease of 20 PCE
-
  !python {model: procurement.list.line}: |
    assert self.browse(cr, uid, ref('list3_line1')).product_qty == 10.0, "Quantity of old line isn't updated"
-
    I check if the quantity of the new line is good
-
  !python {model: procurement.list.line}: |
    line_id = self.search(cr, uid, [('product_id', '=', ref('product5')), ('list_id', '=', ref('list3'))])
    for line in line_id:
      if line != ref('list3_line1'):
        assert self.browse(cr, uid, line).product_qty == 20.00, "Quantity of new line is wrong"
-
    I change the supplier of the second line
-
  !python {model: procurement.list.line}: |
    line_id = self.search(cr, uid, [('product_id', '=', ref('product5')), ('list_id', '=', ref('list3')), ('id', '!=', ref('list3_line1'))])
    self.write(cr, uid, line_id, {'supplier_id': ref('supplier6')})
-
    I simulate a click on Create Purchase Order button
-
  !python {model: procurement.list}: |
    self.create_po(cr, uid, [ref('list3')])
-
    I check if two purchase orders have well created
-
  !assert {model: procurement.list, id: list3}:
    - len(order_ids) == 2, "Number of sourcing documents is wrong"
-
    I check if the purchase orders have well confirmed
-
  !python {model: procurement.list}: |
    for order in self.browse(cr, uid, ref('list3')).order_ids:
      assert order.state == 'confirmed', "PO state isn't confirmed"
    
