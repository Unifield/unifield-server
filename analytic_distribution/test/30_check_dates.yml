-
  In order to check date, I create some analytic accounts with inactivation date, an analytic distribution and some expense lines then I reallocate them under the inactive account
-
  I create an expense.
-
  !record {model: account.move, id: move30}:
    journal_id: account_journal_expenses_0
    name: move 30
    period_id: period1
    document_date: !eval "'%s-%s-17' % (datetime.now().year, datetime.now().month)"
    date: !eval "'%s-%s-17' % (datetime.now().year + 10, datetime.now().month)"
    currency_id: base.EUR
    line_id:
    - name: a product
      account_id: account_account_expense0
      debit: 123.0
      credit: 0.0
      currency_id: base.EUR
      document_date: !eval "'%s-%s-17' % (datetime.now().year, datetime.now().month)"
      date: !eval "'%s-%s-17' % (datetime.now().year + 10, datetime.now().month)"
      analytic_distribution_id: distrib_2
    - name: counterpart
      account_id: account_account_payable_supplier0
      debit: 0.0
      credit: 123.0
      currency_id: base.EUR
      document_date: !eval "'%s-%s-17' % (datetime.now().year, datetime.now().month)"
      date: !eval "'%s-%s-17' % (datetime.now().year + 10, datetime.now().month)"
-
  I post this expense
-
  !python {model: account.move}: |
    self.post(cr, uid, ref('move30'))
-
  I check that an analytic lines have been created
-
  !python {model: account.analytic.line}: |
    al_ids = self.search(cr, uid, [('cost_center_id', '=', ref('cc1')), ('account_id', '=', ref('analytic_account_msf_private_funds')), ('general_account_id', '=', ref('account_account_expense0'))])
    assert len(al_ids) == 1, "Should have only 1 analytic line!"
-
  I reallocate the line to FP1 (which shouldn't be possible because it finish the 10, and the line is on 17).
-
  !python {model: mass.reallocation.wizard}: |
    from datetime import datetime
    from osv import osv
    ana_obj = self.pool.get('account.analytic.line')
    al_ids = ana_obj.search(cr, uid, [('cost_center_id', '=', ref('cc1')), ('account_id', '=', ref('analytic_account_msf_private_funds')), ('general_account_id', '=', ref('account_account_expense0'))])
    if isinstance(al_ids, (int, long)):
      al_ids = [al_ids]
    wiz_id = self.create(cr, uid, {'account_id': ref('fp1'), 'line_ids': [(6, 0, x) for x in [al_ids]], 'date': '%s-%s-17' % (datetime.now().year + 10, datetime.now().month)})
    try:
      res = self.button_validate(cr, uid, wiz_id)
    except osv.except_osv, e:
      error = e.value
    finally:
      assert error == 'No line to be processed (So no one is compatible.)', "Problem with given error: %s" % (error or '')
-
  I change so CC1 to CC2, in order to see if wizard refuse it.
-
  !python {model: mass.reallocation.wizard}: |
    from datetime import datetime
    from osv import osv
    ana_obj = self.pool.get('account.analytic.line')
    al_ids = ana_obj.search(cr, uid, [('cost_center_id', '=', ref('cc1')), ('account_id', '=', ref('analytic_account_msf_private_funds')), ('general_account_id', '=', ref('account_account_expense0'))])
    if isinstance(al_ids, (int, long)):
      al_ids = [al_ids]
    wiz_id = self.create(cr, uid, {'account_id': ref('cc2'), 'line_ids': [(6, 0, x) for x in [al_ids]], 'date': '%s-%s-17' % (datetime.now().year + 10, datetime.now().month)})
    try:
      res = self.button_validate(cr, uid, wiz_id)
    except osv.except_osv, e:
      error = e.value
    finally:
      assert error == 'No line to be processed (So no one is compatible.)', "Problem with given error: %s" % (error or '')
-
  Finally, I change CC1 to CC3, in order to see if wizard ACCEPT IT.
-
  !python {model: mass.reallocation.wizard}: |
    ana_obj = self.pool.get('account.analytic.line')
    al_ids = ana_obj.search(cr, uid, [('cost_center_id', '=', ref('cc1')), ('account_id', '=', ref('analytic_account_msf_private_funds')), ('general_account_id', '=', ref('account_account_expense0'))])
    if isinstance(al_ids, (int, long)):
      al_ids = [al_ids]
    # I change analytic lines document date
    from datetime import datetime
    for al in ana_obj.browse(cr, uid, al_ids):
      ana_obj.write(cr, uid, al_ids, {'document_date': '%s-%s-01' % (datetime.now().year, datetime.now().month), })
    wiz_id = self.create(cr, uid, {'account_id': ref('cc3'), 'line_ids': [(6, 0, x) for x in [al_ids]], 'date': '%s-%s-17' % (datetime.now().year + 10, datetime.now().month)})
    res = self.button_validate(cr, uid, wiz_id)
    # Should have this: {'view_mode': 'form', 'res_id': [1], 'name': 'Verification Result', 'context': {}, 'view_type': 'form', 'res_model': 'mass.reallocation.verification.wizard', 'type': 'ir.actions.act_window', 'target': 'new'}
    next_obj = res.get('res_model', False) and self.pool.get(res.get('res_model')) or False
    next_id = res.get('res_id', False) and res.get('res_id') or False
    assert next_obj != False, "No result for mass reallocation wizard!"
    assert next_id != False, "No wizard for mass reallocation check!"
    from osv import osv
    error = None
    try:
      next_obj.button_validate(cr, uid, next_id)
    except osv.except_osv, e:
      error = e.value
    finally:
      assert error is None, "Error occured: %s" % (error or '')
-
  I create an invoice the 17 with CC2 (from 3 to 10) in order to test date check on validation.
-
  !record {model: account.invoice, id: check_date_invoice}:
    document_date: !eval "'%s-%s-17' % (datetime.now().year, datetime.now().month)"
    date_invoice: !eval "'%s-%s-17' % (datetime.now().year + 10, datetime.now().month)"
    account_id: account_account_payable_supplier0
    address_contact_id: res_partner_address_tempo
    address_invoice_id: res_partner_address_tempo
    check_total: 45.0
    company_id: base.main_company
    currency_id: base.CHF
    period_id: period1
    invoice_line:
      - account_id: account_account_expense0
        name: 'Basic product'
        price_unit: 15.0
        product_id: product_basic_finance_0
        quantity: 3.0
        uos_id: product.product_uom_unit
        analytic_distribution_id: distrib_3
    journal_id: account_journal_expenses_0
    partner_id: res_partner_supplier_wood_0
    reference_type: none
    type: in_invoice
-
  I validate invoice and check that it returns an error like 'The analytic account selected is not active.'
-
  !python {model: account.invoice}: |
    self.pool.get('account.invoice').write(cr, uid, [ref('check_date_invoice')], {'from_yml_test': False,})
    import netsvc
    from osv import osv
    wf_service = netsvc.LocalService('workflow')
    error = None
    try:
      wf_service.trg_validate(uid, 'account.invoice', ref('check_date_invoice'), 'invoice_open', cr)
    except osv.except_osv, e:
      error = e.value
    finally:
      assert error == "The analytic account selected 'Cost Center 2' is not active.", "Another error occured: %s" % (error or '')
