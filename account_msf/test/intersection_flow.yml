-
  Creating a res.partner record that is an inter-section (partner type)
- 
  !record {model: res.partner, id: res_partner_a0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: OCBA
    supplier: true
    customer: true
    partner_type: section
-
  Creating a res.partner.address record
-
  !record {model: res.partner.address, id: res_partner_address_0}:
    partner_id: res_partner_a0
    street: A
-
  I create product template .
-
  !record {model: product.template, id: product_template_p0}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P
    procure_method: make_to_stock
    standard_price: 160.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
-
  Creating a product.product record
-
  !record {model: product.product, id: product_product_p0}:
    standard_price: 1.0
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    product_tmpl_id: product_template_p0
    international_status: msf_supply_doc_import.int_1
-
  Creating a sale.order record
-
  !record {model: sale.order, id: sale_order_so0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: picking
    partner_id: res_partner_a0
    partner_invoice_id: res_partner_address_0
    partner_order_id: res_partner_address_0
    partner_shipping_id: res_partner_address_0
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
    from_yml_test: True
-
  Creating a sale.order.line record
-
  !record {model: sale.order.line, id: sale_order_line_p0}:
    company_id: base.main_company
    delay: 7.0
    name: P
    order_id: sale_order_so0
    order_partner_id: res_partner_a0
    price_unit: 1.0
    product_id: product_product_p0
    product_uom: product.product_uom_unit
    product_uom_qty: 1.0
    salesman_id: base.user_admin
    state: draft
    th_weight: 0.0
    type: make_to_stock
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("sale_order_so0"), 'order_confirm', cr)
-
  I check the draft picking creation and create a simple out then force availibilty and process it. Finally create invoice.
-
  !python {model: stock.picking}: |
    ids = self.search(cr, uid, [('sale_id', '=', ref("sale_order_so0")), ('state', '=', 'draft')], context=context)
    assert len(ids) == 1, 'number of created draft picking is wrong, 1 - %s'%len(ids)
    self.convert_to_standard(cr, uid, ids)
    self.force_assign(cr, uid, ids)
    self.action_process(cr, uid, ids)
    self.action_invoice_create(cr, uid, ids)
    inv_ids = self.pool.get('account.invoice').search(cr, uid, [('state', '=', 'draft'), ('type', '=', 'out_invoice'), ('partner_id', '=', ref("res_partner_a0"))])
    assert len(ids) == 1, 'Problem for invoice creation'
-
  I change draft invoice account to 4500 one. Then change account from lines and finally validate invoice.
-
  !python {model: account.invoice}: |
    inv_ids = self.search(cr, uid, [('state', '=', 'draft'), ('type', '=', 'out_invoice'), ('partner_id', '=', ref("res_partner_a0"))])
    self.write(cr, uid, inv_ids[0], {'account_id': ref("account_account_receivable0"), 'from_yml_test': True})
    invl_ids = self.pool.get('account.invoice.line').search(cr, uid, [('invoice_id', '=', inv_ids[0])])
    for invl in invl_ids:
        self.pool.get('account.invoice.line').write(cr, uid, invl, {'account_id': ref("account_account_expense0")})
    res = self.action_open_invoice(cr, uid, inv_ids[0])
    assert res == True, "Customer invoice have not been validated!"
    self.write(cr, uid, inv_ids[0], {'state': 'open'})
-
  I create a Debit Note
-
  !record {model: account.invoice, id: debit_note0}:
    is_debit_note: true
    type: out_invoice
    partner_id: res_partner_a0
    account_id: account_account_payable_customer0
    address_contact_id: res_partner_address_0
    address_invoice_id: res_partner_address_0
    company_id: base.main_company
    currency_id: base.EUR
    journal_id: account.expenses_journal
    reference_type: none
-
  I import last invoice that come from sale order into debit note
-
  !record {model: debit.note.import.invoice, id: debit_note_import_invoice0}:
    invoice_id: debit_note0
    currency_id: base.EUR
    partner_id: res_partner_a0
-
  I add some lines into debit note import invoice then I validate it and check that invoice have some lines
-
  !python {model: debit.note.import.invoice}: |
    inv_ids = self.pool.get('account.invoice').search(cr, uid, [('state', '=', 'open'), ('partner_id', '=', ref("res_partner_a0")), ('type', '=', 'out_invoice')])
    self.write(cr, uid, [ref("debit_note_import_invoice0")], {'line_ids': [(6, 0, [inv_ids[0]])]})
    self.button_validate(cr, uid, ref("debit_note_import_invoice0"))
    lines = self.pool.get('account.invoice').browse(cr, uid, ref("debit_note0")).invoice_line
    assert len(lines) > 0, "No invoice imported!"
    for line in lines:
      assert line.account_id.id == ref("account_account_receivable0"), "Wrong account: %s" % line.account_id.code
-
  I finally validate debit note and check that invoice line is reconciled with last invoice
-
  !python {model: account.invoice}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.invoice', ref("debit_note0"), 'invoice_open', cr)
    ml_ids = self.pool.get('account.move.line').search(cr, uid, [('invoice', '=', ref("debit_note0")), ('reconcile_id', '!=', False)])
    assert len(ml_ids) == 1, "Problem with reconciliation"
