-
  In order to test the RACÂ reporting, I will create a report and
  process this report
-
  I create the RAC report
-
  !record {model: real.average.consumption, id: rac1}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-08-01', '%Y-%m-%d'))
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 250.0
      - product_id: product2
        uom_id: product.product_uom_unit
        consumed_qty: 150.0
      - product_id: product3
        uom_id: product.product_uom_unit
        consumed_qty: 12.0
-
  I check the default value of fields
-
  !assert {model: real.average.consumption, id: rac1}:
    - period_to == time.strftime('%Y-%m-%d'), "The default value of the field period_ok not corresponding on today"
    - valid_ok, "The checkbox valid_ok is not checked by default"
    - not created_ok, "The checkbox created_ok is checked by default"
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    from osv import osv
    try:
      self.process_moves(cr, uid, ref('rac1'), context=context)
    except osv.except_osv, e:
      assert False, "Error when processing moves"
-
  I check if stock moves has been created
-
  !python {model: real.average.consumption}: |
    rac = self.browse(cr, uid, ref('rac1'))
    for line in rac.line_ids:
      assert line.move_id, "No moves created for the %s" % line.product_id.name
-
  I create a second RAC report
-
  !record {model: real.average.consumption, id: rac2}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-07-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-07-31', '%Y-%m-%d'))
    valid_ok: false
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 150.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 360.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    self.process_moves(cr, uid, ref('rac2'))
-
  I check if stock moves hasn't been created
-
  !python {model: real.average.consumption}: |
    rac = self.browse(cr, uid, ref('rac2'))
    for line in rac.line_ids:
      assert not line.move_id, "Moves created for the %s" % line.product_id.name
-
  I create a third RAC report
-
  !record {model: real.average.consumption, id: rac3}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-10', '%Y-%m-%d'))
    valid_ok: true
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 256.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 35.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    try:
      res = self.process_moves(cr, uid, ref('rac3'))
    except:
      assert False, "Error when processing moves"
-
  I create a fourth RAC report
-
  !record {model: real.average.consumption, id: rac4}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-10', '%Y-%m-%d'))
    valid_ok: true
    line_ids: 
      - product_id: product2
        uom_id: product_10_unit
        consumed_qty: 32.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 68.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    self.process_moves(cr, uid, ref('rac4'))
-
  I check the calculation of a consumption for the entire period
-
  !python {model: product.product}: |
    import time
    p1_rac = self.browse(cr, uid, ref('product1'), context=context).monthly_consumption
    to_date_str = time.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d')
    nb_months = (to_date_str.tm_year-2011)*12
    nb_months = to_date_str.tm_mon-6
    nb_months -= to_date_str.tm_mday < 1 and ((1-to_date_str.tm_mday)/30)
    nb_months += to_date_str.tm_mday > 1 and ((to_date_str.tm_mday-1)/30)
    assert p1_rac == round(506.00/nb_months, 2), "The average of product 1 is not correct"
-
  I check the calculation of a consumption for the entire period with another UoM
-
  !python {model: product.product}: |
    import time
    p1_rac = self.browse(cr, uid, ref('product1'), context=context).monthly_consumption
    to_date_str = time.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d')
    nb_months = (to_date_str.tm_year-2011)*12
    nb_months = to_date_str.tm_mon-6
    nb_months -= to_date_str.tm_mday < 1 and ((1-to_date_str.tm_mday)/30)
    nb_months += to_date_str.tm_mday > 1 and ((to_date_str.tm_mday-1)/30)
    assert p1_rac == round(506.00/nb_months, 2), "The average of product 1 is not correct"
-
  I check the average consumption for 2011, June
-
  !python {model: product.product}: |
    context = {'from_date': '2011-06-01', 'to_date': '2011-06-30'}
    p4_rac = self.browse(cr, uid, ref('product4'), context=context).monthly_consumption
    assert p4_rac == 103.00, "The average of product 4 for 2011, June is not correct"