-
  In order to test the expiry calculation, I will open a wizard and see
  if values on lines are good
- 
  !record {model: product.likely.expire.report, id: exp1}:
    date_to: !eval "'2020-12-31'"
    consumption_type: fmc
-
  I launch the calculation
- 
  !python {model: product.likely.expire.report}: |
    self.process_lines(cr, uid, ref('exp1'), context=context)
-
  Check if all lines are created
-
  !python {model: product.likely.expire.report}: |
    report = self.browse(cr, uid, ref('exp1'), context=context)
    assert len(report.line_ids) >= 3, "All lines aren't created by the expiry calculation process"
    p5 = p6 = p7 = False
    for line in report.line_ids:
      if line.product_id.id == ref('product5'):
        p5 = True
      if line.product_id.id == ref('product6'):
        p6 = True
      if line.product_id.id == ref('product7'):
        p7 = True
    assert p5, "No line created for P5"
    assert p6, "No line created for P6"
    assert p7, "No line created for P7"
-
  Check if the first line are good values
-
  !python {model: product.likely.expire.report.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    p50days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=50)).strftime('%Y-%m-%d')
    p12days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=12)).strftime('%Y-%m-%d')
    p15days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=15)).strftime('%Y-%m-%d')
    p25days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=25)).strftime('%Y-%m-%d')
    p17days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=17)).strftime('%Y-%m-%d')
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product5')), ('report_id', '=', ref('exp1'))], context=context)
    for line in self.browse(cr, uid, line_ids, context=context):
      assert line.real_stock == 80.00, "Real stock is not correct for the product P5"
      assert line.total_expired == 54.00, "Total expired is not correct for the product P5"
      exp_line_ids = self.pool.get('expiry.report.date.line').search(cr, uid, [('line_id', '=', line.id)], context=context)
      for exp_line in self.pool.get('expiry.report.date.line').browse(cr, uid, exp_line_ids, context=context):
        if exp_line.name == p12days:
          assert exp_line.qty == 45.00, "Quantity for P5 at today + 12 days is not correct"
          assert exp_line.expired_qty == 19.00, "Expiry quantities for P5 at today + 12 days is not correct"
        if exp_line.name == p15days:
          assert exp_line.qty == 43.00, "Quantity for P5 at today + 15 days is not correct"
          assert exp_line.expired_qty == 00.00, "Expiry quantities for P5 at today + 15 days is not correct"
        if exp_line.name == p17days:
          assert exp_line.qty == 42.00, "Quantity for P5 at today + 17 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P5 at today + 17 days is not correct"
        if exp_line.name == p25days:
          assert exp_line.qty == 39.00, "Quantity for P5 at today + 25 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P5 at today + 25 days is not correct"
        if exp_line.name == p50days:
          assert exp_line.qty == 0.00, "Quantity for P5 at today + 50 days is not correct"
          assert exp_line.expired_qty == 25.00, "Expiry quantities for P5 at today + 50 days is not correct"
-
  Check if the second line are good values
-
  !python {model: product.likely.expire.report.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    p50days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=50)).strftime('%Y-%m-%d')
    p12days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=12)).strftime('%Y-%m-%d')
    p15days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=15)).strftime('%Y-%m-%d')
    p25days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=25)).strftime('%Y-%m-%d')
    p17days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=17)).strftime('%Y-%m-%d')
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product6')), ('report_id', '=', ref('exp1'))], context=context)
    for line in self.browse(cr, uid, line_ids, context=context):
      assert line.real_stock == 38.00, "Real stock is not correct for the product P6"
      assert line.total_expired == 21.00, "Total expired is not correct for the product P6"
      exp_line_ids = self.pool.get('expiry.report.date.line').search(cr, uid, [('line_id', '=', line.id)], context=context)
      for exp_line in self.pool.get('expiry.report.date.line').browse(cr, uid, exp_line_ids, context=context):
        if exp_line.name == p12days:
          assert exp_line.qty == 34.00, "Quantity for P6 at today + 12 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry uantities for P6 at today + 12 days is not correct"
        if exp_line.name == p15days:
          assert exp_line.qty == 13.00, "Quantity for P6 at today + 15 days is not correct"
          assert exp_line.expired_qty == 20.00, "Expiry uantities for P6 at today + 15 days is not correct"
        if exp_line.name == p17days:
          assert exp_line.qty == 12.00, "Quantity for P6 at today + 17 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry uantities for P6 at today + 17 days is not correct"
        if exp_line.name == p25days:
          assert exp_line.qty == 10.00, "Quantity for P6 at today + 25 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry uantities for P6 at today + 25 days is not correct"
        if exp_line.name == p50days:
          assert exp_line.qty == 0.00, "Quantity for P6 at today + 50 days is not correct"
          assert exp_line.expired_qty == 1.00, "Expiry uantities for P6 at today + 50 days is not correct"
-
  Check if the third line are good values
-
  !python {model: product.likely.expire.report.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    p50days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=50)).strftime('%Y-%m-%d')
    p12days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=12)).strftime('%Y-%m-%d')
    p15days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=15)).strftime('%Y-%m-%d')
    p25days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=25)).strftime('%Y-%m-%d')
    p17days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=17)).strftime('%Y-%m-%d')
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product7')), ('report_id', '=', ref('exp1'))], context=context)
    for line in self.browse(cr, uid, line_ids, context=context):
      assert line.real_stock == 108.00, "Real stock is not correct for the product P7"
      assert line.total_expired == 78.00, "Total expired is not correct for the product P7"
      exp_line_ids = self.pool.get('expiry.report.date.line').search(cr, uid, [('line_id', '=', line.id)], context=context)
      for exp_line in self.pool.get('expiry.report.date.line').browse(cr, uid, exp_line_ids, context=context):
        if exp_line.name == p12days:
          assert exp_line.qty == 86.00, "Quantity for P7 at today + 12 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P7 at today + 12 days is not correct"
        if exp_line.name == p15days:
          assert exp_line.qty == 83.00, "Quantity for P7 at today + 15 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P7 at today + 15 days is not correct"
        if exp_line.name == p17days:
          assert exp_line.qty == 81.00, "Quantity for P7 at today + 17 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P7 at today + 17 days is not correct"
        if exp_line.name == p25days:
          assert exp_line.qty == 10.00, "Quantity for P7 at today + 25 days is not correct"
          assert exp_line.expired_qty == 66.00, "Expiry quantities for P7 at today + 25 days is not correct"
        if exp_line.name == p50days:
          assert exp_line.qty == -13.00, "Quantity for P7 at today + 50 days is not correct"
          assert exp_line.expired_qty == 0.00, "Expiry quantities for P7 at today + 50 days is not correct"
-
  !record {model: product.likely.expire.report, id: exp2}:
    date_to: !eval "'2020-12-31'"
    consumption_type: rac
-
  I launch the calculation
- 
  !python {model: product.likely.expire.report}: |
    try:
      self.process_lines(cr, uid, ref('exp2'), context=context)
    except:
      assert False, "Error on Real Average Consumption"