-
  In order to make tests, I create some elements in accounting.
-
  I create a fiscalyear
-
  !record {model: account.fiscalyear, id: fiscalyear0}:
    code: !eval "'FY%s'% (datetime.now().year)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year)"
-
  I create the period 01
-
  !record {model: account.period, id: period_1}:
    company_id: base.main_company
    date_start: !eval time.strftime('%Y-01-01')
    date_stop: !eval time.strftime('%Y-01-31')
    fiscalyear_id: fiscalyear0
    name: JANUARY
    special: 0
    number: 1
-
  I create the period 02
-
  !record {model: account.period, id: period_2}:
    company_id: base.main_company
    date_start: !eval time.strftime('%Y-02-01')
    date_stop: !eval time.strftime('%Y-02-28') # WARNING: bisextil year doesn't work here
    fiscalyear_id: fiscalyear0
    name: FEBRUARY
    special: 0
    number: 2
-
  I create the period 03
-
  !record {model: account.period, id: period_3}:
    company_id: base.main_company
    date_start: !eval time.strftime('%Y-03-01')
    date_stop: !eval time.strftime('%Y-03-31')
    fiscalyear_id: fiscalyear0
    name: MARCH
    special: 0
    number: 3
-
  I create an Expense account type.
-
  !record {model: account.account.type, id: type_expense}:
    close_method: unreconciled
    code: expense
    name: Expense
    sign: 1
-
  I create a Debt account type.
-
  !record {model: account.account.type, id: type_debt}:
    close_method: balance
    code: debt
    name: debt
    sign: 1
-
  I create a reconciliable 4000 debt account
-
  !record {model: account.account, id: account_4000}:
    name: 4000 account
    code: '4000'
    type: other
    user_type: type_debt
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    reconcile: 1
-
  I create a 6303 expense account
-
  !record {model: account.account, id: account_6303}:
    name: 6303 account
    code: '6303'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_support]
-
  I create a 6400 expense account
-
  !record {model: account.account, id: account_6400}:
    name: 6400 account
    code: '6400'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_support]
-
  I create a 6401 expense account
-
  !record {model: account.account, id: account_6401}:
    name: 6401 account
    code: '6401'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_operation
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_national_staff]
-
  I create a 6412 expense account
-
  !record {model: account.account, id: account_6412}:
    name: 6412 account
    code: '6412'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_support]
-
  I create an analytic journal for HQ entries
-
  !record {model: account.analytic.journal, id: analytic_journal_hq}:
    code: ahq
    name: Analytic HQ Journal
    type: hq
-
  I create a HQ Journal
-
  !record {model: account.journal, id: journal_hq}:
    code: hq
    company_id: base.main_company
    name: HQ Journal
    type: hq
    allow_date: 0
    analytic_journal_id: analytic_journal_hq
-
  I update company to have 4000 account as hq default counterpart
-
  !python {model: res.company}: |
    assert self.write(cr, uid, [ref('base.main_company')], {'counterpart_hq_entries_default_account': ref('account_4000')}) == ref('base.main_company'), "Setting up company HQ counterpart (%) failed!" % ref('account_4000')
-
  I create a link between 6400 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6400_operation}:
    account_id: account_6400
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6400 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6400_support}:
    account_id: account_6400
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create a link between 6401 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6401_operation}:
    account_id: account_6401
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6401 expense account and National Staff destination
-
  !record {model: account.destination.link, id: tuple_6401_nat}:
    account_id: account_6401
    destination_id: analytic_distribution.analytic_account_destination_national_staff
-
  I create a link between 6412 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6412_operation}:
    account_id: account_6412
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6412 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6412_support}:
    account_id: account_6412
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create a link between 6303 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6303_support}:
    account_id: account_6303
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create CC1 analytic account
-
  !record {model: account.analytic.account, id: cc1}:
    name: Cost Center 1
    code: CC1
    type: normal
    category: OC
    date_start: !eval time.strftime('%Y-01-01')
-
  I create FP1 analytic account
-
  !record {model: account.analytic.account, id: fp1}:
    name: Funding Pool 1
    code: FP1
    category: FUNDING
    date_start: !eval time.strftime('%Y-01-01')
    cost_center_ids: [cc1]
    tuple_destination_account_ids: [tuple_6400_operation, tuple_6400_support, tuple_6401_operation, tuple_6401_nat, tuple_6412_operation, tuple_6412_support, tuple_6303_support]
-
  I add a new FX rate for EUR, CHF and BIF for the first day of this year
-
  !python {model: res.currency.rate}: |
    import time
    cur_obj = self.pool.get('res.currency')
    for el in [('EUR', 1.0), ('CHF', 1.386), ('BIF', 226.0)]:
      c_ids = cur_obj.search(cr, uid, [('name', 'ilike', el[0]), ('active', 'in', ['f', 't'])])
      for c in c_ids:
        rate_vals = {
          'currency_id': c,
          'name': time.strftime('%Y-01-01'),
          'rate': el[1],
        }
        self.create(cr, uid, rate_vals, context={})
        cur_obj.write(cr, uid, c, {'active': True}, context={})
-
  I activate all needed destination analytic account
-
  !python {model: account.analytic.account}: |
    import time
    self.write(cr, uid, [ref('analytic_distribution.analytic_account_destination_support'), ref('analytic_distribution.analytic_account_destination_operation'), ref('analytic_distribution.analytic_account_destination_national_staff'), ref('analytic_distribution.analytic_account_msf_private_funds')], {'date_start': time.strftime('%Y-01-01')})
