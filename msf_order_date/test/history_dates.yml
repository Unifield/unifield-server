-
  In order to test if an history entry was created when a date change
-
  I create a Purchase Order
-
  !record {model: purchase.order, id: po2}:
    name: 'PO/22'
    company_id: base.main_company
    invoice_method: 'order'
    location_id: stock.stock_location_stock
    partner_address_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    delivery_confirmed_date: !eval time.strftime('%Y-%m-%d')
    delivery_requested_date: !eval time.strftime('%Y-%m-%d')
-
  A line for this Purchase Order
-
  !record {model: purchase.order.line, id: po2_line1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: po2
    price_unit: 1.30
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  I create a Sale Order
-
  !record {model: sale.order, id: so2}:
    name: 'SO/22'
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    delivery_confirmed_date: !eval time.strftime('%Y-%m-%d')
    delivery_requested_date: !eval time.strftime('%Y-%m-%d')
-
  A line for this Sale Order
-
  !record {model: sale.order.line, id: so2_line1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: so2
    price_unit: 1.30
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  I create a fiscal year
-
  !record {model: account.fiscalyear, id: year1}:
    name: Fiscal Year 2007
    code: FY-2007
    date_start: 2007-01-01
    date_stop: 2007-12-31
    company_id: base.main_company
-
  I create six periods
-
  First one
-
  !record {model: account.period, id: account_period_jan0}:
    company_id: base.main_company
    date_start: 2007-01-01
    date_stop: 2007-01-31
    fiscalyear_id: year1
    name: Jan-2007
    special: 1
-
  Second one
-
  !record {model: account.period, id: account_period_feb0}:
    company_id: base.main_company
    date_start: 2007-02-01
    date_stop: 2007-02-28
    fiscalyear_id: year1
    name: Feb-+-2007
    special: 1
-
  Third
-
  !record {model: account.period, id: account_period_mar0}:
    company_id: base.main_company
    date_start: 2007-03-01
    date_stop: 2007-03-31
    fiscalyear_id: year1
    name: Mar-2007
    special: 1
-
  Fourth
-
  !record {model: account.period, id: account_period_apr0}:
    company_id: base.main_company
    date_start: 2007-04-01
    date_stop: 2007-04-30
    fiscalyear_id: year1
    name: Apr-2007
    special: 1
-
  Fifth
-
  !record {model: account.period, id: account_period_mai0}:
    company_id: base.main_company
    date_start: 2007-05-01
    date_stop: 2007-05-31
    fiscalyear_id: year1
    name: May-2007
    special: 1
-
  Sixth
-
  !record {model: account.period, id: account_period_jun0}:
    company_id: base.main_company
    date_start: 2007-06-01
    date_stop: 2007-06-30
    fiscalyear_id: year1
    name: Jun-2007
    special: 1
-
  For Date Order in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'date_order': '2007-02-01'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-02-01'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Creation Date"
-
  For Date Order in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'date_order': '2007-02-01'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-02-01'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Creation Date"
-
  For Delivery Requested Date in Sale
-
  !python {model: sale.order}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'delivery_requested_date': two_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', two_days), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Delivery Requested Date"
-
  For Delivery Requested Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'delivery_requested_date': two_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', two_days), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Delivery Requested Date"
-
  For Delivery Confirmed Date in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'delivery_confirmed_date': '2007-03-03'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-03-03'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Delivery Confirmed Date"
-
  For Delivery Confirmed Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'delivery_confirmed_date': '2007-03-03'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-03-03'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Delivery Confirmed Date"
-
  For Est. Transport Lead Time in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'est_transport_lead_time': '30'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '30'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Est. Transport Lead Time"
-
  For Est. Transport Lead Time Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'est_transport_lead_time': '30'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '30'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Est. Transport Lead Time"
-
  For Ready To Ship Date in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'ready_to_ship_date': '2007-04-04'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-04-04'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Ready To Ship Date"
-
  For Ready To Ship Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'ready_to_ship_date': '2007-04-04'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-04-04'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Ready To Ship Date"
-
  For Shipment Date in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'shipment_date': '2007-05-05'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-05-05'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Shipment Date"
-
  For Shipment Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'shipment_date': '2007-05-05'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-05-05'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Shipment Date"
-
  For Arrival Date in Sale
-
  !python {model: sale.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2'), {'arrival_date': '2007-06-06'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-06-06'), ('sale_id', '=', ref('so2'))])) == 1, "Wrong number of history on Arrival Date"
-
  For Arrival Date in Purchase
-
  !python {model: purchase.order}: |
    import time
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2'), {'arrival_date': '2007-06-06'})
    assert len(history_obj.search(cr, uid, [('new_value', '=', '2007-06-06'), ('purchase_id', '=', ref('po2'))])) == 1, "Wrong number of history on Arrival Date"
-
  Line level
-
  Date Planned on Sale Order Line
-
  !python {model: sale.order.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    ten_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=10)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2_line1'), {'date_planned': ten_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', ten_days), ('sale_line_id', '=', ref('so2_line1'))])) == 1, "Wrong number of history on Planned Date on line"
-
  Date Planned on Purchase Line
-
  !python {model: purchase.order.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    ten_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=10)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2_line1'), {'date_planned': ten_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', ten_days), ('purchase_line_id', '=', ref('po2_line1'))])) == 1, "Wrong number of history on Planned Date on line"
-
  Delivery Confirmed Date on Sale Line
-
  !python {model: sale.order.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    fourty_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=4)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('so2_line1'), {'confirmed_delivery_date': fourty_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', fourty_days), ('sale_line_id', '=', ref('so2_line1'))])) == 1, "Wrong number of history on Delivery Requested Date on line"
-
  Delivery Confirmed Date on Purchase Line
-
  !python {model: purchase.order.line}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    fourty_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=40)).strftime('%Y-%m-%d')
    history_obj = self.pool.get('history.order.date')
    self.write(cr, uid, ref('po2_line1'), {'confirmed_delivery_date': fourty_days})
    assert len(history_obj.search(cr, uid, [('new_value', '=', fourty_days), ('purchase_line_id', '=', ref('po2_line1'))])) == 1, "Wrong number of history on Delivery Requested Date on line"