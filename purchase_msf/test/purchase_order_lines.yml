-
  In order to test the new purchase order line screen, we first create new partners.
  We then create new products with different internal and supplier configuration (code and name).
  
  Finally we create purchase orders with purchase order lines for these different products.


  Creating a product.category record
- 
  !record {model: product.category, id: product_category_testproducts0}:
    name: Test products
    sequence: 0.0
-

  I create the first partner,
  Name AFRICOM
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
-
  !record {model: res.partner, id: res_partner_africom0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AFRICOM
    supplier: true
-
  I create the second partner,
  Name AlainDeLoin
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_alaindeloin0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AlainDeLoin
    supplier: true
-
  I create the third partner,
  Name Berthe
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_berthe0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: Berthe
    supplier: true
-

  I create the corresponding addresses


  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_0}:
    country_id: base.au
    partner_id: res_partner_africom0
    street: street
    type: default
    zip: '1234'


- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_2}:
    partner_id: res_partner_alaindeloin0
    street: street
    
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_3}:
    partner_id: res_partner_berthe0
    street: street
-

  I create the first product, with no specified suppliers,
  Name Boite Ã  chaussures
  Reference CHAUSS INT 1234


  Creating a product.product record
- 
  !record {model: product.product, id: product_product_boitechaussures0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: CHAUSS-INT-1234
    mes_type: fixed
    name: Boite \xc3\xa0 chaussures
    name_template: Boite \xc3\xa0 chaussures
    procure_method: make_to_stock
    seller_delay: '1'
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
-
  I create the second product, with one specified supplier,
  Name Camembert
  Reference CAM-INT-1234
  Supplier AFRICOM
  * Supplier product Name Fromage qui pue Africom
  * Supplier product Code PUE AFRI 1234


  Creating a product.product record
- 
  !record {model: product.product, id: product_product_camembert0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: CAM-INT-1234
    mes_type: fixed
    name: Camembert
    name_template: Camembert
    procure_method: make_to_stock
    seller_delay: '1'
    seller_id: res_partner_africom0
    seller_ids:
      - delay: 1
        min_qty: 0.0
        name: res_partner_africom0
        product_code: PUE-AFRI-1234
        product_name: Fromage qui pue Africom
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
-
  I create the third product, with two specified supplier, the first one with supplier info, the second one without,
  Name Pneu
  Reference PNEU INT 1234
  Supplier AlainDeLoin
  * Supplier product Name Pneu AlainDeLoin
  * Supplier product Code PNEU ALAIN 1234
  Supplier Berthe


  Creating a product.product record
- 
  !record {model: product.product, id: product_product_pneu0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: PNEU-INT-1234
    mes_type: fixed
    name: Pneu
    name_template: Pneu
    procure_method: make_to_stock
    seller_delay: '1'
    seller_id: res_partner_alaindeloin0
    seller_ids:
      - delay: 1
        min_qty: 0.0
        name: res_partner_alaindeloin0
        product_code: PNEU-ALAIN-1234
        product_name: Pneu AlainDeLoin
      - delay: 1
        min_qty: 0.0
        name: res_partner_berthe0
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
-

  I create the first purchase order
  Supplier AFRICOM
  The selected product has AFRICOM as specified supplier

- 
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po1}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-03-15'
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: '2011-03-15'
    name: PO00004
    partner_address_id: res_partner_address_0
    partner_id: res_partner_africom0
    pricelist_id: purchase.list0
-

  I create the order line

  Creating a purchase.order.line record
- 
  !record {model: purchase.order.line, id: purchase_order_line_boitechaussures0}:
    company_id: base.main_company
    date_planned: '2011-03-15'
    internal_code: CHAUSS-INT-1234
    internal_name: Boite \xc3\xa0 chaussures
    name: Boite \xc3\xa0 chaussures
    order_id: purchase_order_po1
    partner_id: res_partner_africom0
    price_unit: 1.0
    product_id: product_product_boitechaussures0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
-

  I check the onchange function, it should correspond
  to data from selected product supplier
  
  gather corresponding purchase order line
  retrieve the values from onChange function
  compare the data with the one from pol
  
  name
  internal_code
  internal_name
  supplier_code
  supplier_name

-
  !python {model: purchase.order.line}: |
    pol = self.browse(cr, uid, ref("purchase_order_line_boitechaussures0"))
    
    result = pol.product_id_change(pol.order_id.pricelist_id.id, pol.product_id.id,
    								pol.product_qty, pol.product_uom.id, pol.order_id.partner_id.id,
    								pol.order_id.date_order, pol.order_id.fiscal_position.id,
    								pol.date_planned, pol.name, pol.price_unit, pol.notes)
    
    innerDic = result['value']
    
    assert innerDic['name'] == pol.name
    assert (innerDic['internal_code'] or '') == (pol.internal_code or ''), "internal_code %s vs %s" % (innerDic['internal_code'], pol.internal_code)
    assert (innerDic['internal_name'] or '') == (pol.internal_name or ''), "internal_name %s vs %s" % (innerDic['internal_name'], pol.internal_name)
    assert (innerDic['supplier_code'] or '') == (pol.supplier_code or ''), "supplier_code %s vs %s" % (innerDic['supplier_code'], pol.supplier_code)
    assert (innerDic['supplier_name'] or '') == (pol.supplier_name or ''), "supplier_name %s vs %s" % (innerDic['supplier_name'], pol.supplier_name)
-


  create a PO with supplier alaindeloin and product pneu
  pneu has alaindeloin as one of its supplier. Supplier
  information is specified


  Creating a purchase.order record
-
  !record {model: purchase.order, id: purchase_order_po0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-03-15'
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: '2011-03-16'
    name: PO00005
    partner_address_id: res_partner_address_2
    partner_id: res_partner_alaindeloin0
    pricelist_id: purchase.list0
-


  I create the order line

  Creating a purchase.order.line record
- 
  !record {model: purchase.order.line, id: purchase_order_line_pneu2}:
    company_id: base.main_company
    date_planned: '2011-03-16'
    internal_code: PNEU-INT-1234
    internal_name: Pneu
    name: Pneu
    order_id: purchase_order_po0
    partner_id: res_partner_alaindeloin0
    price_unit: 1.0
    product_id: product_product_pneu0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
    supplier_code: PNEU-ALAIN-1234
    supplier_name: Pneu AlainDeLoin
-

  I check the onchange function, it should correspond
  to data from selected product supplier
  
  gather corresponding purchase order line
  retrieve the values from onChange function
  compare the data with the one from pol
  
  name
  internal_code
  internal_name
  supplier_code
  supplier_name

-
  !python {model: purchase.order.line}: |
    pol = self.browse(cr, uid, ref("purchase_order_line_pneu2"))
    
    result = pol.product_id_change(pol.order_id.pricelist_id.id, pol.product_id.id,
    								pol.product_qty, pol.product_uom.id, pol.order_id.partner_id.id,
    								pol.order_id.date_order, pol.order_id.fiscal_position.id,
    								pol.date_planned, pol.name, pol.price_unit, pol.notes)
    
    innerDic = result['value']
    
    assert innerDic['name'] == pol.name
    assert (innerDic['internal_code'] or '') == (pol.internal_code or ''), "internal_code %s vs %s" % (innerDic['internal_code'], pol.internal_code)
    assert (innerDic['internal_name'] or '') == (pol.internal_name or ''), "internal_name %s vs %s" % (innerDic['internal_name'], pol.internal_name)
    assert (innerDic['supplier_code'] or '') == (pol.supplier_code or ''), "supplier_code %s vs %s" % (innerDic['supplier_code'], pol.supplier_code)
    assert (innerDic['supplier_name'] or '') == (pol.supplier_name or ''), "supplier_name %s vs %s" % (innerDic['supplier_name'], pol.supplier_name)
-


  create a PO with berthe as its supplier and pneu. berthe
  is one of the specified supplier for pneu, but with no
  supplier information (code and name)

  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po2}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-03-15'
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: '2011-03-16'
    name: PO00003
    partner_address_id: res_partner_address_3
    partner_id: res_partner_berthe0
    pricelist_id: purchase.list0
-


  I create the order line

  Creating a purchase.order.line record
- 
  !record {model: purchase.order.line, id: purchase_order_line_pneu1}:
    company_id: base.main_company
    date_planned: '2011-03-16'
    internal_code: PNEU-INT-1234
    internal_name: Pneu
    name: Pneu
    order_id: purchase_order_po2
    partner_id: res_partner_berthe0
    price_unit: 1.0
    product_id: product_product_pneu0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
-

  I check the onchange function, it should correspond
  to data from selected product supplier
  
  gather corresponding purchase order line
  retrieve the values from onChange function
  compare the data with the one from pol
  
  name
  internal_code
  internal_name
  supplier_code
  supplier_name

-
  !python {model: purchase.order.line}: |
    pol = self.browse(cr, uid, ref("purchase_order_line_pneu1"))
    
    result = pol.product_id_change(pol.order_id.pricelist_id.id, pol.product_id.id,
    								pol.product_qty, pol.product_uom.id, pol.order_id.partner_id.id,
    								pol.order_id.date_order, pol.order_id.fiscal_position.id,
    								pol.date_planned, pol.name, pol.price_unit, pol.notes)
    
    innerDic = result['value']
    
    assert innerDic['name'] == pol.name
    assert (innerDic['internal_code'] or '') == (pol.internal_code or ''), "internal_code %s vs %s" % (innerDic['internal_code'], pol.internal_code)
    assert (innerDic['internal_name'] or '') == (pol.internal_name or ''), "internal_name %s vs %s" % (innerDic['internal_name'], pol.internal_name)
    assert (innerDic['supplier_code'] or '') == (pol.supplier_code or ''), "supplier_code %s vs %s" % (innerDic['supplier_code'], pol.supplier_code)
    assert (innerDic['supplier_name'] or '') == (pol.supplier_name or ''), "supplier_name %s vs %s" % (innerDic['supplier_name'], pol.supplier_name)
-


  create a PO with supplier AFRICOM. and product Pneu,
  Pneu has two suppliers specified but none of them is AFRICOM


  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po3}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-03-15'
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: '2011-03-16'
    name: PO00002
    partner_address_id: res_partner_address_0
    partner_id: res_partner_africom0
    pricelist_id: purchase.list0
-

  I create the order line

  Creating a purchase.order.line record
- 
  !record {model: purchase.order.line, id: purchase_order_line_pneu0}:
    company_id: base.main_company
    date_planned: '2011-03-16'
    internal_code: PNEU-INT-1234
    internal_name: Pneu
    name: Pneu
    order_id: purchase_order_po3
    partner_id: res_partner_africom0
    price_unit: 1.0
    product_id: product_product_pneu0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
-

  I check the onchange function, it should correspond
  to data from selected product supplier
  
  gather corresponding purchase order line
  retrieve the values from onChange function
  compare the data with the one from pol
  
  name
  internal_code
  internal_name
  supplier_code
  supplier_name

-
  !python {model: purchase.order.line}: |
    pol = self.browse(cr, uid, ref("purchase_order_line_pneu0"))
    
    result = pol.product_id_change(pol.order_id.pricelist_id.id, pol.product_id.id,
    								pol.product_qty, pol.product_uom.id, pol.order_id.partner_id.id,
    								pol.order_id.date_order, pol.order_id.fiscal_position.id,
    								pol.date_planned, pol.name, pol.price_unit, pol.notes)
    
    innerDic = result['value']
    
    assert innerDic['name'] == pol.name
    assert (innerDic['internal_code'] or '') == (pol.internal_code or ''), "internal_code %s vs %s" % (innerDic['internal_code'], pol.internal_code)
    assert (innerDic['internal_name'] or '') == (pol.internal_name or ''), "internal_name %s vs %s" % (innerDic['internal_name'], pol.internal_name)
    assert (innerDic['supplier_code'] or '') == (pol.supplier_code or ''), "supplier_code %s vs %s" % (innerDic['supplier_code'], pol.supplier_code)
    assert (innerDic['supplier_name'] or '') == (pol.supplier_name or ''), "supplier_name %s vs %s" % (innerDic['supplier_name'], pol.supplier_name)
-
