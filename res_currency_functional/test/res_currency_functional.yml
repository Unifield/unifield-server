-
  This test will check the multi-currency module.
-
  I create the currency with a rate.
-
  !record {model: res.currency, id: currency_test}:
    name: TST
    symbol: TST
    active: True
    rounding: 0.001
    rate_ids:
      - name: !eval "'%s-01-01' %(datetime.now().year+1)"
        rate: 100.00
-
  I set the company currency's rate to 1 for the move (12th March)
-
  !record {model: res.currency.rate, id: currency_rate_test_3}:
    name: !eval "'%s-03-12' %(datetime.now().year+1)"
    rate: 1.00
    currency_id: base.CHF
-
  I create, in order, a account type, ...
-
  !record {model: account.account.type, id: account_account_type_asset0}:
    close_method: balance
    code: asset
    name: Asset
    sign: 1
-
  ...an account, ...
-
  !record {model: account.account, id: account_1}:
    name: "Test Account"
    code: "TEST"
    user_type: account_account_type_asset0
    type: payable
    active: True
-
  ...an analytical journal, ...
-
  !record {model: account.analytic.journal, id: analytic_journal_1}:
    code: CANJ
    name: Cash Analytic Journal
    type: general
-
  ...a journal, ...
-
  !record {model: account.journal, id: account_journal_1}:
    name: Cash Journal
    code: CTST
    currency: currency_test
    type: cash
    analytic_journal_id: analytic_journal_1
-
  ...a fiscal year, ...
-
  !record {model: account.fiscalyear, id: account_fiscalyear_fiscalyear0}:
    code: !eval "'FY%s'% (datetime.now().year+1)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year+1)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year+1)"
-
  ... and a period.
-
  !record {model: account.period, id: account_period_mar0}:
    company_id: base.main_company
    date_start: !eval "'%s-03-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-03-31' %(datetime.now().year+1)"
    fiscalyear_id: account_fiscalyear_fiscalyear0
    name: !eval "'Mar %s' %(datetime.now().year+1)"
    special: 1
    state: draft
-
  I create an account move line with all of this.
-
  !record {model: account.move.line, id: move_line_test}:
    name: testline
    journal_id: account_journal_1
    period_id: account_period_mar0
    account_id: account_1
    currency_id: currency_test
    date: !eval "'%s-03-12' %(datetime.now().year+1)"
    debit_currency: 4242.0
-
  After creation, I check that the debit in fuctional currency was correctly computed
-
  !assert {model: account.move.line, id: move_line_test}:
    - debit == 42.42
-
  I create another currency rate
-
  !record {model: res.currency.rate, id: currency_rate_test_2}:
    name: !eval "'%s-03-01' %(datetime.now().year+1)"
    rate: 1000.00
    currency_id: currency_test
-
  After this, I check that the debit in fuctional currency was correctly re-computed
-
  !assert {model: account.move.line, id: move_line_test}:
    - debit == 4.24
