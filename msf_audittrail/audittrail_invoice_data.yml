-
  I will create a rule for Invoice object
-
  !python {model: audittrail.rule}: |
    name = 'Invoice Order'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.invoice')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['date_invoice', 'state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.invoice'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': True,
                                      'log_unlink': True,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
-
  I will create a rule for Register object
-
  !python {model: audittrail.rule}: |
    name = 'Register'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.bank.statement')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.bank.statement'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': True,
                                      'log_unlink': True,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
-
  I will create a rule for Budget object
-
  !python {model: audittrail.rule}: |
    name = 'Budget'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'msf.budget')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'msf.budget'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': False,
                                      'log_unlink': False,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
-
  I will create a rule for Financing Contracts object
-
  !python {model: audittrail.rule}: |
    name = 'Financing Contract'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'financing.contract.contract')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'financing.contract.contract'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': True,
                                      'log_unlink': True,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
-
  I will create a rule for Analytic account object
-
  !python {model: audittrail.rule}: |
    name = 'Analytic Account'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.analytic.account')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.analytic.account'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': False,
                                      'log_unlink': False,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
-
  I will create a rule for Period object
-
  !python {model: audittrail.rule}: |
    name = 'Period'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'account.period')], context=context)
    rule_id = self.search(cr, uid, [('object_id', 'in', object_ids)], context=context)
    if object_ids and not rule_id:
      # Create the rule
      fields = ['state']

      fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'account.period'), ('name', 'in', fields)], context=context)
        
      rule_id = self.create(cr, uid, {'name': name,
                                      'object_id': object_ids[0],
                                      'log_write': True,
                                      'log_unlink': True,
                                      'log_create': True,
                                      'field_ids': [(6, 0, fields_ids)],
                                     }, context=context)
                                    
      # Subscribe to the rule
      self.subscribe(cr, uid, rule_id)
